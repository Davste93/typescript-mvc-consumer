define(["require","exports"],function(e,n){"use strict";var t=function(){function e(){this.name="fluffy"}return e}();n.Dog=t}),define(["require","exports","./example"],function(e,n,t){"use strict";var i=function(){function e(){this.name="minie"}return e}();n.Cat=i;var r=new t.Dog;console.log(r.name)});
//# sourceMappingURL=data:application/json;base64,
